services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://backend:3001
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=1000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - app-network
    command: sh -c "npm install && npm run dev"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=1000
      - CHOKIDAR_STABILITY_THRESHOLD=2000
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=true
      - FORCE_COLOR=1
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=demo_user
      - DB_PASSWORD=demo_password
      - DB_DATABASE=demo_shipment
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - postgres
    command: sh -c "npm install && npm run start:dev"

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=demo_shipment
      - POSTGRES_USER=demo_user
      - POSTGRES_PASSWORD=demo_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:

